import express from 'express';
import http from 'http';
import { WebSocketServer } from 'ws';
import path from 'path';
import { fileURLToPath } from 'url';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import cors from 'cors';

// Fix __dirname in ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

const port = process.env.PORT || 3000;

// Security Middlewares
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: '10kb' }));

// Rate Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Static Files
app.use(express.static(path.join(__dirname, 'public'), {
  maxAge: '1d',
  setHeaders: (res, filePath) => {
    if (filePath.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache');
    }
  }
}));

// Routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'guest.html'));
});

// WebSocket Logic
const clients = {
  guests: new Set(),
  studios: new Set()
};

wss.on('connection', (ws, req) => {
  console.log(`New connection from ${req.socket.remoteAddress}`);
  let role = null;

  // Heartbeat
  const heartbeatInterval = setInterval(() => {
    ws.ping();
  }, 30000);

  ws.on('message', (data) => {
    try {
      const msg = JSON.parse(data);

      if (msg.type === 'register') {
        role = msg.role;
        const clientSet = role === 'guest' ? clients.guests : clients.studios;
        clientSet.add(ws);
        console.log(`Registered: ${role} (Total: ${clientSet.size})`);
      } 
      else if (msg.type === 'signal') {
        const targetSet = msg.target === 'studio' ? clients.studios : clients.guests;
        targetSet.forEach(client => {
          if (client !== ws && client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'signal',
              from: role,
              payload: msg.payload
            }));
          }
        });
      }
    } catch (err) {
      console.error('Message parsing error:', err);
    }
  });

  ws.on('close', () => {
    clearInterval(heartbeatInterval);
    if (role === 'guest') clients.guests.delete(ws);
    else if (role === 'studio') clients.studios.delete(ws);
    console.log(`${role || 'Unknown'} disconnected`);
  });

  ws.on('error', (err) => {
    console.error('WebSocket error:', err);
  });
});

// Error Handling
server.on('error', (err) => {
  console.error('Server error:', err);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
});

process.on('unhandledRejection', (err) => {
  console.error('Unhandled Rejection:', err);
});

// Start Server
server.listen(port, () => {
  console.log(`Server running on port ${port}`);
  console.log(`WebSocket accessible at: wss://your-render-app.onrender.com`);
});
